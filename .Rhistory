a = getAsspDataObj("~/emuDBs/ae/signals/msajc003.f0")
a
a$data
attributes(data)
data
attributes(a)
a[0]
a[]
a$F0
a[]
a[]
20000*0.0025
1/20
1/200
200/1000
128086/44100
128086/200
0.0025*44100
0.0025*20000
1/200
install.packages("emiu")
install.packages("emu")
install.packages("emu")
ls()
getwd
getwd()
?getwd()
pfad = "/Users/raphaelwinkelmann/Desktop/jmh/"
ls()
pfad = "http://www.phonetik.uni-muenchen.de/~jmh/lehre/Rdf/"
pfad = "/Users/raphaelwinkelmann/Desktop/jmh/"
pfadu = "http://www.phonetik.uni-muenchen.de/~jmh/lehre/Rdf/"
q()
library(emu)
emulink("/Applications/Emu 2.4.app/Contents/lib")
ls
ls
emu.track
العربية • Български • Català • Česky • Dansk • Deutsch • Eesti • English • Español • Esperanto • Euskara • فارسی • Français • Galego • 한국어 • हिन्दी • Hrvatski • Bahasa Indonesia • Italiano • עברית • Lietuvių • Magyar • Bahasa Melayu • Nederlands • 日本語 • Norsk (bokmål • nynorsk) • Oʻzbekcha • Polski • Português • Қазақша / Qazaqşa / قازاقشا • Română • Русский • Slovenčina • Slovenščina • Српски / Srpski • Suomi • Svenska • Türkçe • Українська • Tiếng Việt • Volapük •
ls
emu.track
seq(0, samfreq/2, length = ncol(result$data))
library(wrassp)
getAsspDataObj("~/emuDBs/ae/signals/msajc003.dft")
dft$data
dft[]
resultgetAsspDataObj("~/emuDBs/ae/signals/msajc003.dft")
result = getAsspDataObj("~/emuDBs/ae/signals/msajc003.dft")
result$data
result[]
result$dft
size(result$dft)
dim(result$dft)
seq(0, 44100/2, length = 256)
library(wrassp)
library(wrassp)
myObj = getAsspDataObj("~/Desktop/ae/signals/msajc003.f0x")
plot(myObj$F0)
test = f0ana("~/Desktop/ae/signals/msajc003.wav","~/Desktop/log.txt", ToFile=FALSE)
plot(test$F0)
fList = list.files("~/Desktop/ae/", "*.wav", recursive=T, full.names=T)
f0ana(fList, "~/Desktop/log.txt")
fList = list.files("~/Desktop/ae/", "*.wav", recursive=T, full.names=T)
test
fList
f0ana(fList, "~/Desktop/log.txt")
f0ana(fList, "~/Desktop/log.txt")
library(wrassp)
myObj = getAsspDataObj("~/Desktop/ae/signals/msajc003.f0x")
plot(myObj$F0)
myObj$F0
test = f0ana("~/Desktop/ae/signals/msajc003.wav","~/Desktop/log.txt", ToFile=FALSE)
test
plot(test$F0)
fList = list.files("~/Desktop/ae/", "*.wav", recursive=T, full.names=T)
fList
f0ana(fList, "~/Desktop/log.txt")
source('~/Documents/talks/VIU2013/demo.R', echo=TRUE)
library('seglist');
new_sls = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="n")$slists[[1]]
new_sls
sl_n = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="@")$slists[[1]]
sl_n = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="n")$slists[[1]]
sl_at = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="@")$slists[[1]]
sl_n
sl_at
fList = list.files("~/Desktop/ae/", "*.wav", recursive=T, full.names=T)
sl_n = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="n")$slists[[1]]
sl_at = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="@")$slists[[1]]
sl_n = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="n")$slists[[1]]
sl_at = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="@")$slists[[1]]
sl_at = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="@")$slists[[1]]
sl_n
td_n = newEmu.track(new_sls, "f0:F0")
td_n = newEmu.track(new_sls, "f0:F0")
td_n = newEmu.track(sl_n, "f0:F0")
td_at = newEmu.track(sl_at, "f0:F0")
td_n
td_n$data
boxplot(td_n$data)
boxplot(td_n$data, td_at$data)
boxplot(td_n$data)
?boxplot
boxplot(c(td_n$data, td_n$data))
boxplot(c(td_n$data, td_at$data))
as.matrix(c(td_n$data, td_at$data)
)
as.matrix(td_n$data, td_at$data)
as.matrix(td_n$data, td_at$data)
boxplot(td_n)
boxplot(td_n$data)
boxplot(td_at$data, add=T)
boxplot(td_n$data)
boxplot(td_n$data)
boxplot(td_at$data, add=T, col=2)
par(mfrow=c(2,2))
boxplot(td_at$data, add=T, col=2)
par(mfrow=c(2,2))
boxplot(td_n$data)
boxplot(td_at$data, add=T, col=2)
par(mfrow=c(1,2))
boxplot(td_n$data)
boxplot(td_at$data, add=T, col=2)
boxplot(td_n$data)
boxplot(td_at$data, col=2
par(mfrow=c(1,2))
boxplot(td_n$data)
boxplot(td_at$data, col=2)
median(td_n$data)
median(td_at$data)
td_n2 = newEmu.track(sl_n, "f0:F0", OnTheFlyFunctionName="mhspitch", OnTheFlyOptLogFilePath="~/Desktop/log.txt")
mhspitch(fList, "~/Desktop/log.txt")
td_n2 = newEmu.track(sl_n, "pit:pitch", OnTheFlyFunctionName="mhspitch", OnTheFlyOptLogFilePath="~/Desktop/log.txt")
td_n2 = newEmu.track(sl_n, "pit:pitch", OnTheFlyFunctionName="mhspitch", OnTheFlyOptLogFilePath="~/Desktop/log.txt")
td_at2 = newEmu.track(sl_at, "pit:pitch", OnTheFlyFunctionName="mhspitch", OnTheFlyOptLogFilePath="~/Desktop/log.txt")
1,2))
boxplot(td_n2$data)
boxplot(td_a
par(mfrow=c(1,2))
par(mfrow=c(1,2))
boxplot(td_n2$data)
boxplot(td_at2$data, col=2)
median(td_n2$data)
median(td_a2t$data)
par(mfrow=c(1,2))
boxplot(td_n2$data)
boxplot(td_at2$data, col=2)
median(td_n2$data)
median(td_at2$data)
median(td_n$data)
median(td_at$data)
version
library(wrassp)
myObj = getAsspDataObj("~/Desktop/ae/signals/msajc003.f0x")
myObj
plot(myObj$F0)
test = f0ana("~/Desktop/ae/signals/msajc003.wav","~/Desktop/log.txt", ToFile=FALSE)
plot(test$F0)
fList = list.files("~/Desktop/ae/", "*.wav", recursive=T, full.names=T)
fList
f0ana(fList, "~/Desktop/log.txt")
library('seglist');
sl_n = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="n")$slists[[1]] // change to textgrid corpus
sl_at = readEmuCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="@")$slists[[1]] // change to textgrid corpus
sl_n = readTextGridCorpus("~/Desktop/ae/ae.tpl", newemuutts=T, label="n")$slists[[1]] # change to textgrid corpus
?readTextGridCorpus
sl_n = readTextGridCorpus("~/Desktop/ae/labels/", newemuutts=T, label="n")$slists[[1]] # change to textgrid corpus
sl_n = readTextGridCorpus(signalpath="~/Desktop/ae/signals/" ,tgpath="~/Desktop/ae/labels/", newemuutts=T, label="n")$slists[[1]] # change to textgrid corpus
sl_n = readTextGridCorpus(signalpath="~/Desktop/ae/signals/" ,tgpath="~/Desktop/ae/labels/", levels="Phonetic", label="n", newemuutts=T)$slists[[1]] # change to textgrid corpus
sl_n
sl_at = readTextGridCorpus(signalpath="~/Desktop/ae/signals/" ,tgpath="~/Desktop/ae/labels/", levels="Phonetic", label="@", newemuutts=T)$slists[[1]]
td_n = newEmu.track(sl_n, "f0:F0")
td_at = newEmu.track(sl_at, "f0:F0")
td_n
boxplot(td_n$data)
boxplot(td_at$data, col=2)
median(td_n$data)
median(td_at$data)
par(mfrow=c(1,2))
boxplot(td_n$data)
boxplot(td_at$data, col=2)
median(td_n$data)
median(td_at$data)
td_n2 = newEmu.track(sl_n, "pit:pitch", OnTheFlyFunctionName="mhspitch", OnTheFlyOptLogFilePath="~/Desktop/log.txt")
td_n2
td_at2 = newEmu.track(sl_at, "pit:pitch", OnTheFlyFunctionName="mhspitch", OnTheFlyOptLogFilePath="~/Desktop/log.txt")
par(mfrow=c(1,2))
boxplot(td_n2$data)
boxplot(td_at2$data, col=2)
median(td_n2$data)
median(td_at2$data)
library(wrassp)
myObj = getAsspDataObj("~/Desktop/ae/signals/msajc003.f0x")
myObj$F0
plot(myObj$F0)
plot(test$F0)
fList = list.files("~/Desktop/ae/", "*.wav", recursive=T, full.names=T)
fList
f0ana(fList, "~/Desktop/log.txt")
library('seglist');
sl_n = readTextGridCorpus(signalpath="~/Desktop/ae/signals/" ,tgpath="~/Desktop/ae/labels/", levels="Phonetic", label="n", newemuutts=T)$slists[[1]]
sl_at = readTextGridCorpus(signalpath="~/Desktop/ae/signals/" ,tgpath="~/Desktop/ae/labels/", levels="Phonetic", label="@", newemuutts=T)$slists[[1]]
sl_n
td_n = newEmu.track(sl_n, "f0:F0")
td_at = newEmu.track(sl_at, "f0:F0")
td_n
par(mfrow=c(1,2))
boxplot(td_n$data)
boxplot(td_at$data, col=2)
median(td_n$data)
median(td_at$data)
td_n2 = newEmu.track(sl_n, "pit:pitch", OnTheFlyFunctionName="mhspitch", OnTheFlyOptLogFilePath="~/Desktop/log.txt")
td_at2 = newEmu.track(sl_at, "pit:pitch", OnTheFlyFunctionName="mhspitch", OnTheFlyOptLogFilePath="~/Desktop/log.txt")
par(mfrow=c(1,2))
boxplot(td_n2$data)
boxplot(td_at2$data, col=2)
median(td_n2$data)
median(td_at2$data)
library(wrassp)
fList = list.files("~/Desktop/ae/", "*.wav", recursive=T, full.names=T)
forest(fList, "~/Desktop/log.txt")
library(roxygen)
library(roxygen2)
install.packages(devtools)
install.packages("devtools")
install.packages("roxygen2")
install.packages("testthat")
install.packages("devtools")
library(roxygen2"")
library("roxygen2")
library(emu)
install.packages("meu")
install.packages("emu")
library(emu)
emulink("/Applications/Emu 2.4.app/Contents//lib")
install.packages("roxygen2")
install.packages("testthat")
library(devtools)
load_all("~/Developer/wrasspDevelFolder/wrassp/")
load_all("~/Developer/wrasspDevelFolder/wrassp/")
load_all("~/Developer/wrasspDevelFolder/wrassp/")
f0ana("Desktop/ae/signals//msajc003.wav")
install("~/Developer/wrasspDevelFolder/wrassp/")
f0ana("Desktop/ae/signals//msajc003.wav")
acf("Desktop/ae/signals//msajc003.wav")
acfana("Desktop/ae/signals//msajc003.wav")
acfana("~/Desktop/ae/signals//msajc003.wav")
install("~/Developer/wrasspDevelFolder/wrassp/")
acfana("~/Desktop/ae/signals//msajc003.wav")
install("~/Developer/wrasspDevelFolder/wrassp/")
acfana("Desktop/ae/signals//msajc003.wav")
acfana("Desktop/ae/signals//msajc003.wav","~/Desktop/log.txt")
list.files("~/Desktop/ae/signals/")
list.files("~/Desktop/ae/signals/","wav")
fL = list.files("~/Desktop/ae/signals/","wav")
acfana(,"~/Desktop/log.txt")
acfana(fL)
fL = list.files("~/Desktop/ae/signals/","wav",full.names=T)
fL
acfana(fL)
?affilter
install("~/Developer/wrasspDevelFolder/wrassp/")
?affilter
document("~/Developer/wrasspDevelFolder//wrassp")
install("~/Developer/wrasspDevelFolder/wrassp/")
?affilter
install("~/Developer/wrasspDevelFolder/wrassp/")
load_all("pkg")
load_all("~/Developer//wrasspDevelFolder/wrassp/")
?affilter
library("wrassp")
?affilter
check("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
install("~/Developer/wrasspDevelFolder/wrassp/")
?affilter
install("~/Developer/wrasspDevelFolder/wrassp/")
library(devtools)
install("~/Developer/wrasspDevelFolder/wrassp/")
?affilter
library(wrassp)
?affilter
document("~/Developer/wrasspDevelFolder/wrassp/")
install("~/Developer/wrasspDevelFolder/wrassp/")
library(wrassp)
?affilter
?affilter
install("~/Developer/wrasspDevelFolder/wrassp/")
document("~/Developer/wrasspDevelFolder/wrassp/")
install("~/Developer/wrasspDevelFolder/wrassp/")
?affilter
library(devtools)
document("~/Developer/wrasspDevelFolder/wrassp/")
document("~/Developer/wrasspDevelFolder/wrassp/")
document("~/Developer/wrasspDevelFolder/wrassp/")
document("~/Developer/wrasspDevelFolder/wrassp/")
document("~/Developer/wrasspDevelFolder/wrassp/")
document("~/Developer/wrasspDevelFolder/wrassp/")
document("~/Developer/wrasspDevelFolder/wrassp/")
document("~/Developer/wrasspDevelFolder/wrassp/")
install("~/Developer/wrasspDevelFolder/wrassp/")
?f0ana
library(devtools)
library(wrassp)
?f0ana
f0_ksv
f0_ksv()
load_all("~/Developer/wrasspDevelFolder/wrassp/")
f0_ksv()
f0_ksv("~/data/kielSub/g071a000.wav")
install("~/Developer/wrasspDevelFolder/wrassp/")
f0_ksv("~/data/kielSub/g071a000.wav")
f0_ksv("~/data/kielSub/g071a000.wav")
load_all("~/Developer/wrasspDevelFolder/wrassp/")
f0_ksv("~/data/kielSub/g071a000.wav")
zcrana("~/data/kielSub/g071a000.wav")
build("~/Developer/wrasspDevelFolder/wrassp/")
install("~/Developer/wrasspDevelFolder/wrassp/")
load_all("~/Developer/wrasspDevelFolder/wrassp/")
zcrana("~/data/kielSub/g071a000.wav")
document("~/Developer/wrasspDevelFolder/wrassp/")
check("~/Developer/wrasspDevelFolder/wrassp/")
check("~/Developer/wrasspDevelFolder/wrassp/")
check("~/Developer/wrasspDevelFolder/wrassp/")
check("~/Developer/wrasspDevelFolder/wrassp/",doc_clean=T)
check("~/Developer/wrasspDevelFolder/wrassp/")
check("~/Developer/wrasspDevelFolder/wrassp/")
check("~/Developer/wrasspDevelFolder/wrassp/")
check("~/Developer/wrasspDevelFolder/wrassp/")
?check
check("~/Developer/wrasspDevelFolder/wrassp/")
check("~/Developer/wrasspDevelFolder/wrassp/", document=F)
build("~/Developer/wrasspDevelFolder/wrassp/", document=F)
build("~/Developer/wrasspDevelFolder/wrassp")
library(wrassp)
f0_ksv("Desktop/ae/signals/msajc003.wav")
f0_ksv("data/kielSub//g071a001.wav")
f0_ksv("data/kielSub//g071a001", ToFile=F)
a = f0_ksv("data/kielSub//g071a001", ToFile=F)
a
a = f0_ksv("data/kielSub//g071a001.wav", ToFile=F)
a
class(a)
attributes(a)
?AsspDataObj
?Assp
??Assp
a = spectrum("data/kielSub//g071a001.wav", ToFile=F)
a
a = spectrum("data/kielSub//g071a001.wav", ToFile=F)
load_all("~/Developer/wrasspDevelFolder/wrassp")
library(wrassp)
a = spectrum("data/kielSub//g071a001.wav", ToFile=F)
a
library(devtools)
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
check("~/Developer//wrasspDevelFolder/wrassp/")
library(devtools)
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
AsspSpectTypes
AsspSpectTypes()
document("~/Developer//wrasspDevelFolder/wrassp/")
install("~/Developer//wrasspDevelFolder/wrassp/")
library(wrassp)
?AsspSpectTypes
document("~/Developer//wrasspDevelFolder/wrassp/")
"isAsspSpectType" <- function(spectName = NULL) {
if (is.null(spectName)) {
stop("No lpName given!")
}
spectTypes = AsspSpectTypes()
isValidSpect = FALSE
for (type in spectTypes) {
if (spectName == type) {
isValidSpect = TRUE
break
}
}
return(isValidSpect)
}
AsspSpectTypes
AsspSpectTypes()
isAsspSpectType("dsf")
isAsspSpectType("CSS")
document("~/Developer//wrasspDevelFolder/wrassp/")
install("~/Developer//wrasspDevelFolder/wrassp/")
?isAsspSpectType
document("~/Developer//wrasspDevelFolder/wrassp/")
install("~/Developer//wrasspDevelFolder/wrassp/")
?isAsspSpectType
isAsspSpectType("df")
isAsspSpectType("DFT")
isAsspSpectType("CSS")
isAsspSpectType("CSSS")
document("~/Developer//wrasspDevelFolder/wrassp/")
load_all("~/Developer//wrasspDevelFolder/wrassp/")
?isAsspSpectType
library(wrassp)
?isAsspSpectType
document("~/Developer//wrasspDevelFolder/wrassp/")
document("~/Developer//wrasspDevelFolder/wrassp/")
install("~/Developer//wrasspDevelFolder/wrassp/")
check("~/Developer//wrasspDevelFolder/wrassp/")
check("~/Developer//wrasspDevelFolder/wrassp/")
res
document("~/Developer//wrasspDevelFolder/wrassp/")
library("wrassp")
res=forest("data/kielSub//g071a000.wav", ToFile=FALSE)
plot(res$fm[,1])
plot(res$fm[,0])
plot(res$fm)
res$fm
res$fm[,0]
res$fm[,1]
plot(res$fm[,1])
plot(res$fm[0:100,1])
plot(res$fm[0:100,1],type='l')
plot(res$fm[0:100,1],type='l')
plot(res$fm[0:99,1],type='l')
?acfana
?print.AsspDataObj
library(devtools)
document("~/Developer//wrasspDevelFolder/wrassp/")
library(testthat)
a <- list(1:10, letters)
expect_that(str(a), prints_text("List of 2"))
test_that("floor_date works for different units", {
base <- as.POSIXct("2009-08-03 12:01:59.23", tz = "UTC")
is_time <- function(x) equals(as.POSIXct(x, tz = "UTC"))
floor_base <- function(unit) floor_date(base, unit)
expect_that(floor_base("second"), is_time("2009-08-03 12:01:59"))
expect_that(floor_base("minute"), is_time("2009-08-03 12:01:00"))
})
library(lubridate)
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)
test_that("floor_date works for different units", {
base <- as.POSIXct("2009-08-03 12:01:59.23", tz = "UTC")
is_time <- function(x) equals(as.POSIXct(x, tz = "UTC"))
floor_base <- function(unit) floor_date(base, unit)
expect_that(floor_base("second"), is_time("2009-08-03 12:01:59"))
expect_that(floor_base("minute"), is_time("2009-08-03 12:01:00"))
})
?acfana
library(wrassp)
?acfana
??acfana
system("ls")
f0ana
AsspWindowTypes()
WTs = c("RECTANGLE", "PARABOLA", "COS", "HANN",
"COS_4", "HAMMING", "BLACKMAN", "BLACK_X",
"BLACK_M3", "BLACK_M4", "NUTTAL_3", "NUTTAL_4",
"KAISER2_0", "KAISER3_0", "KAISER4_0")
WTs
AsspLpTypes()
LPTs = c("ARF", "LAR", "LPC", "RFC")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
expect_that(wrasspWins, WTs)
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
test_file("~/Developer//wrasspDevelFolder/wrassp/inst/tests/test_dataTypes.R")
?library
?INSTALL
library(devtolls)
library(devtools)
check("~/Developer//wrasspDevelFolder/wrassp/",cran=T)
check("~/Developer//wrasspDevelFolder/wrassp/",args="--clean")
check("~/Developer//wrasspDevelFolder/wrassp/",args="--preclean")
library(testthat)
test_dir("~/Developer/wrasspDevelFolder/wrassp/inst/tests/")
test_dir("~/Developer/wrasspDevelFolder/wrassp/inst/tests/")
test_dir("~/Developer/wrasspDevelFolder/wrassp/inst/tests/")
test_dir("~/Developer/wrasspDevelFolder/wrassp/inst/tests/")
test_dir("~/Developer/wrasspDevelFolder/wrassp/inst/tests/")
test_dir("~/Developer/wrasspDevelFolder/wrassp/inst/tests/")
test_dir("~/Developer/wrasspDevelFolder/wrassp/inst/tests/")
library(wrassp)
library(devtools)
library(testthat)
setwd("~/Developer//wrasspDevelFolder/wrassp/")
path2wavs="~/Desktop//ae/signals/"
test_file("inst//tests/test_libasspVSwrassp.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
path2wavs
path2wavs
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
test_file("~/Developer/wrasspDevelFolder/wrassp/inst/tests/test_fileIO.R")
