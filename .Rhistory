gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",levelext)
gidx = grep(gstr,tpl)
levelpath = gsub(gstr,"",tpl[gidx])
levelpath = gsub(" *$","",levelpath)
levelpath = paste(levelpath,"/",pattern,".",levelext,sep="")
levelpath
labfiles = Sys.glob(levelpath)
labfile
labfiles
labFilePaths = Sys.glob(levelpath)
labFileInfoL
labFilePaths
signalFilePaths = Sys.glob(samplepath)
signalFilePaths
signalFilePaths = grep(signalFilePaths, uttsPattern)
uttsPattern ="*"
signalFilePaths = grep(signalFilePaths, uttsPattern)
signalFilePaths = grep(uttsPattern, signalFilePaths)
signalFilePaths
signalFilePaths = grep(uttsPattern, "*")
signalFilePaths = Sys.glob(samplepath)
signalFilePaths
relSigFP = grep(uttsPattern, signalFilePaths)
relSigFP
relSigFP = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relLabFPs
?sort
relLabFPs
relLabFPs[1]
basename(relLabFPs[1])
basename(relLabFPs[1])
strsplit(basename(relLabFPs[1]),".",fixed=T)
strsplit(basename(relLabFPs[1]),".",fixed=T)[[1]]
strsplit(basename(relLabFPs[1]),".",fixed=T)[[1]][1]
relSigFP
sort(relSigFP)
cbind(sort(relSigFP))
cbind(sort(relSigFP), sort(relLabFPs))
cbind(sort(relSigFP), sort(relLabFPs))
rbind(sort(relSigFP), sort(relLabFPs))
cbind(sort(relSigFP), sort(relLabFPs))
as.matrix(sort(relSigFP), sort(relLabFPs))
c(sort(relSigFP), sort(relLabFPs))
cbind(sort(relSigFP), sort(relLabFPs))
tpl = readLines(path2tpl)
# determine database name from file name
database = basename(path2tpl)
database = gsub(".tpl$","",database)
database = gsub(".TPL$","",database)
# determine samples type (usually wav, but to make sure...)
gstr = sprintf("^track +samples +")
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find entry 'track samples' in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple entry 'track samples' in template file\n")
}
sampletype = gsub(gstr,"",tpl[gidx])
sampletype = gsub(" *$","",sampletype)
# determine path to sample files (note that the path may contain wild cards)
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",sampletype)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find path entry for samples in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for samples in template file\n")
}
samplepath = gsub(gstr, "", tpl[gidx])
samplepath = gsub(" *$", "", samplepath)
samplepath = paste(samplepath, "/", pattern, ".", sampletype,sep="")
signalFilePaths = Sys.glob(samplepath)
# determine all labfiles specified by timeBasedLevelName
gstr = paste("^labfile", timeBasedLevelName)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find labfile entry for timeBasedLevelName = ", timeBasedLevelName)
}
if(length(gidx) > 1) {
stop("Multiple labfile entries for timeBasedLevelName = ", timeBasedLevelName)
}
levelinfo = strsplit(tpl[gidx],split=":")[[1]]
leveltype = levelinfo[grep("^type",levelinfo)]
leveltype = gsub("^type +","",leveltype)
leveltype = gsub(" *$","",leveltype)
levelext = levelinfo[grep("^extension",levelinfo)]
levelext = gsub("^extension +","",levelext)
levelext = gsub(" *$","",levelext)
leveltimefactor = levelinfo[grep("^time-factor",levelinfo)]
leveltimefactor = gsub("^time-factor +","",leveltimefactor)
leveltimefactor = as.numeric(gsub(" *$","",leveltimefactor))
# determine path to label files (note that the path may contain wild cards)
# also note that the path entry allows lists of extensions for the same path
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",levelext)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("No path entry for level ",timeBasedLevelName," in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for level ",timeBasedLevelName," in template file\n")
}
levelpath = gsub(gstr,"",tpl[gidx])
levelpath = gsub(" *$","",levelpath)
levelpath = paste(levelpath,"/",pattern,".",levelext,sep="")
# determine all label files of this Emu level
labFilePaths = Sys.glob(levelpath)
# filter files according to uttsPattern
relSigFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relSigFP
relLabFPs
relSigFPs = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relSigFP
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relLabFPs
labFilePaths
levelpath
labFilePaths = Sys.glob(levelpath)
levelpath
labFilePaths
labFilePaths = Sys.glob(levelpath)
labFilePaths
Sys.glob(levelpath)
levelpath
Sys.glob(levelpath)
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",levelext)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("No path entry for level ",timeBasedLevelName," in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for level ",timeBasedLevelName," in template file\n")
}
levelpath = gsub(gstr,"",tpl[gidx])
levelpath = gsub(" *$","",levelpath)
levelpath = paste(levelpath,"/",pattern,".",levelext,sep="")
levelpath
labFilePaths = Sys.glob(levelpath)
labFilePaths
relSigFPs = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relSigFP
relSigFPs
relSigFPs = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relSigFPs
relLabFPs
tpl = readLines(path2tpl)
# determine database name from file name
database = basename(path2tpl)
database = gsub(".tpl$","",database)
database = gsub(".TPL$","",database)
# determine samples type (usually wav, but to make sure...)
gstr = sprintf("^track +samples +")
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find entry 'track samples' in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple entry 'track samples' in template file\n")
}
sampletype = gsub(gstr,"",tpl[gidx])
sampletype = gsub(" *$","",sampletype)
# determine path to sample files (note that the path may contain wild cards)
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",sampletype)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find path entry for samples in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for samples in template file\n")
}
samplepath = gsub(gstr, "", tpl[gidx])
samplepath = gsub(" *$", "", samplepath)
samplepath = paste(samplepath, "/", pattern, ".", sampletype,sep="")
# determine all sample files of the Emu corpus
signalFilePaths = Sys.glob(samplepath)
# determine all labfiles specified by timeBasedLevelName
gstr = paste("^labfile", timeBasedLevelName)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find labfile entry for timeBasedLevelName = ", timeBasedLevelName)
}
if(length(gidx) > 1) {
stop("Multiple labfile entries for timeBasedLevelName = ", timeBasedLevelName)
}
levelinfo = strsplit(tpl[gidx],split=":")[[1]]
leveltype = levelinfo[grep("^type",levelinfo)]
leveltype = gsub("^type +","",leveltype)
leveltype = gsub(" *$","",leveltype)
levelext = levelinfo[grep("^extension",levelinfo)]
levelext = gsub("^extension +","",levelext)
levelext = gsub(" *$","",levelext)
leveltimefactor = levelinfo[grep("^time-factor",levelinfo)]
leveltimefactor = gsub("^time-factor +","",leveltimefactor)
leveltimefactor = as.numeric(gsub(" *$","",leveltimefactor))
# determine path to label files (note that the path may contain wild cards)
# also note that the path entry allows lists of extensions for the same path
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",levelext)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("No path entry for level ",timeBasedLevelName," in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for level ",timeBasedLevelName," in template file\n")
}
levelpath = gsub(gstr,"",tpl[gidx])
levelpath = gsub(" *$","",levelpath)
levelpath = paste(levelpath,"/",pattern,".",levelext,sep="")
# determine all label files of this Emu level
labFilePaths = Sys.glob(levelpath)
# filter files according to uttsPattern
relSigFPs = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
if(length(relSigFP) != length(relLabFP)) {
stop("The number of relevant labfiles is NOT equal to the number of relevant audio files")
}
# SIC should check if basenames match!!!
# counter = 1
# for (lF in rel)
# strsplit(basename(relLabFPs[1]),".",fixed=T)[[1]][1]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relSigFPs = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relLabFPs
relSigFPs
# read template
tpl = readLines(path2tpl)
# determine database name from file name
database = basename(path2tpl)
database = gsub(".tpl$","",database)
database = gsub(".TPL$","",database)
# determine samples type (usually wav, but to make sure...)
gstr = sprintf("^track +samples +")
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find entry 'track samples' in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple entry 'track samples' in template file\n")
}
sampletype = gsub(gstr,"",tpl[gidx])
sampletype = gsub(" *$","",sampletype)
# determine path to sample files (note that the path may contain wild cards)
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",sampletype)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find path entry for samples in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for samples in template file\n")
}
samplepath = gsub(gstr, "", tpl[gidx])
samplepath = gsub(" *$", "", samplepath)
samplepath = paste(samplepath, "/", pattern, ".", sampletype,sep="")
# determine all sample files of the Emu corpus
signalFilePaths = Sys.glob(samplepath)
# determine all labfiles specified by timeBasedLevelName
gstr = paste("^labfile", timeBasedLevelName)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find labfile entry for timeBasedLevelName = ", timeBasedLevelName)
}
if(length(gidx) > 1) {
stop("Multiple labfile entries for timeBasedLevelName = ", timeBasedLevelName)
}
levelinfo = strsplit(tpl[gidx],split=":")[[1]]
leveltype = levelinfo[grep("^type",levelinfo)]
leveltype = gsub("^type +","",leveltype)
leveltype = gsub(" *$","",leveltype)
levelext = levelinfo[grep("^extension",levelinfo)]
levelext = gsub("^extension +","",levelext)
levelext = gsub(" *$","",levelext)
leveltimefactor = levelinfo[grep("^time-factor",levelinfo)]
leveltimefactor = gsub("^time-factor +","",leveltimefactor)
leveltimefactor = as.numeric(gsub(" *$","",leveltimefactor))
# determine path to label files (note that the path may contain wild cards)
# also note that the path entry allows lists of extensions for the same path
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",levelext)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("No path entry for level ",timeBasedLevelName," in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for level ",timeBasedLevelName," in template file\n")
}
levelpath = gsub(gstr,"",tpl[gidx])
levelpath = gsub(" *$","",levelpath)
levelpath = paste(levelpath,"/",pattern,".",levelext,sep="")
# determine all label files of this Emu level
labFilePaths = Sys.glob(levelpath)
# filter files according to uttsPattern
relSigFPs = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
if(length(relSigFPs) != length(relLabFPs)) {
stop("The number of relevant labfiles is NOT equal to the number of relevant audio files")
}
# SIC should check if basenames match!!!
# counter = 1
# for (lF in rel)
# strsplit(basename(relLabFPs[1]),".",fixed=T)[[1]][1]
relSigFPs
relLabFPs
tpl = readLines(path2tpl)
# determine database name from file name
database = basename(path2tpl)
database = gsub(".tpl$","",database)
database = gsub(".TPL$","",database)
# determine samples type (usually wav, but to make sure...)
gstr = sprintf("^track +samples +")
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find entry 'track samples' in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple entry 'track samples' in template file\n")
}
sampletype = gsub(gstr,"",tpl[gidx])
sampletype = gsub(" *$","",sampletype)
# determine path to sample files (note that the path may contain wild cards)
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",sampletype)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find path entry for samples in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for samples in template file\n")
}
samplepath = gsub(gstr, "", tpl[gidx])
samplepath = gsub(" *$", "", samplepath)
samplepath = paste(samplepath, "/", pattern, ".", sampletype,sep="")
# determine all sample files of the Emu corpus
signalFilePaths = Sys.glob(samplepath)
# determine all labfiles specified by timeBasedLevelName
gstr = paste("^labfile", timeBasedLevelName)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find labfile entry for timeBasedLevelName = ", timeBasedLevelName)
}
if(length(gidx) > 1) {
stop("Multiple labfile entries for timeBasedLevelName = ", timeBasedLevelName)
}
levelinfo = strsplit(tpl[gidx],split=":")[[1]]
leveltype = levelinfo[grep("^type",levelinfo)]
leveltype = gsub("^type +","",leveltype)
leveltype = gsub(" *$","",leveltype)
levelext = levelinfo[grep("^extension",levelinfo)]
levelext = gsub("^extension +","",levelext)
levelext = gsub(" *$","",levelext)
leveltimefactor = levelinfo[grep("^time-factor",levelinfo)]
leveltimefactor = gsub("^time-factor +","",leveltimefactor)
leveltimefactor = as.numeric(gsub(" *$","",leveltimefactor))
# determine path to label files (note that the path may contain wild cards)
# also note that the path entry allows lists of extensions for the same path
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",levelext)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("No path entry for level ",timeBasedLevelName," in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for level ",timeBasedLevelName," in template file\n")
}
levelpath = gsub(gstr,"",tpl[gidx])
levelpath = gsub(" *$","",levelpath)
levelpath = paste(levelpath,"/",pattern,".",levelext,sep="")
# determine all label files of this Emu level
labFilePaths = Sys.glob(levelpath)
# filter files according to uttsPattern
relSigFPs = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relSigFPs
relLavbFPs
relLabFPs
path2tpl
tpl = readLines(path2tpl)
# determine database name from file name
database = basename(path2tpl)
database = gsub(".tpl$","",database)
database = gsub(".TPL$","",database)
# determine samples type (usually wav, but to make sure...)
gstr = sprintf("^track +samples +")
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find entry 'track samples' in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple entry 'track samples' in template file\n")
}
sampletype = gsub(gstr,"",tpl[gidx])
sampletype = gsub(" *$","",sampletype)
# determine path to sample files (note that the path may contain wild cards)
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",sampletype)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find path entry for samples in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for samples in template file\n")
}
samplepath = gsub(gstr, "", tpl[gidx])
samplepath = gsub(" *$", "", samplepath)
samplepath = paste(samplepath, "/", pattern, ".", sampletype,sep="")
# determine all sample files of the Emu corpus
signalFilePaths = Sys.glob(samplepath)
# determine all labfiles specified by timeBasedLevelName
gstr = paste("^labfile", timeBasedLevelName)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("Cannot find labfile entry for timeBasedLevelName = ", timeBasedLevelName)
}
if(length(gidx) > 1) {
stop("Multiple labfile entries for timeBasedLevelName = ", timeBasedLevelName)
}
levelinfo = strsplit(tpl[gidx],split=":")[[1]]
leveltype = levelinfo[grep("^type",levelinfo)]
leveltype = gsub("^type +","",leveltype)
leveltype = gsub(" *$","",leveltype)
levelext = levelinfo[grep("^extension",levelinfo)]
levelext = gsub("^extension +","",levelext)
levelext = gsub(" *$","",levelext)
leveltimefactor = levelinfo[grep("^time-factor",levelinfo)]
leveltimefactor = gsub("^time-factor +","",leveltimefactor)
leveltimefactor = as.numeric(gsub(" *$","",leveltimefactor))
# determine path to label files (note that the path may contain wild cards)
# also note that the path entry allows lists of extensions for the same path
gstr = sprintf("^path +[^ ]*,*%s,*[^ ]* +",levelext)
gidx = grep(gstr,tpl)
if(length(gidx) == 0) {
stop("No path entry for level ",timeBasedLevelName," in template file\n")
}
if(length(gidx) > 1) {
stop("Multiple path entry for level ",timeBasedLevelName," in template file\n")
}
levelpath = gsub(gstr,"",tpl[gidx])
levelpath = gsub(" *$","",levelpath)
levelpath = paste(levelpath,"/",pattern,".",levelext,sep="")
# determine all label files of this Emu level
labFilePaths = Sys.glob(levelpath)
# filter files according to uttsPattern
relSigFPs = signalFilePaths[grep(uttsPattern, signalFilePaths)]
relLabFPs = labFilePaths[grep(uttsPattern, labFilePaths)]
relSigFPs
relLabFPs
cbind(relSigFPs, relLabFPs)
cbind(sort(relSigFPs), sort(relLabFPs))
cbind(sort(relSigFPs), sort(relLabFPs))[1,]
cbind(sort(relSigFPs), sort(relLabFPs))[,1]
cbind(sort(relSigFPs), sort(relLabFPs))[,2]
fPl = cbind(sort(relSigFPs), sort(relLabFPs))
for (lFp in fPl[,2]){
lfContent = readLines(lFp)
print(lfContent)
}
label="l"
l
label
for (lFp in fPl[,2]){
lfContent = readLines(lFp)
gidx = grep(label, lfContent)
print(lfContent[gidx])
}
lFp
readLines(lFp)
readLines(lFp)[-1]
readLines(lFp)[-2]
readLines(lFp)[-3]
readLines(lFp)[:]
readLines(lFp)[:,]
readLines(lFp)[,:]
readLines(lFp)[1]
readLines(lFp)[2]
readLines(lFp)[3]
readLines(lFp)[4:]
readLines(lFp)[4:5]
for (lFp in fPl[,2]){
lfContent = readLines(lFp)
lfContent = lfContent[4:length(lfContent)]
gidx = grep(label, lfContent)
print(lfContent[gidx])
}
lfContent = readLines(lFp)
lfContent = lfContent[4:length(lfContent)]
gidx = grep(label, lfContent)
print(lfContent[gidx])
library(seglist)
library(emuSX)
ptrofc = "~/Desktop/ae/"
fL = list.files(ptrofc, pattern=".wav", recursive=T, full.names=T)
fL
fPl = recursiveFindBaseNamesInListWithNewExt(fL, rootDir=ptrofc, newExt="TextGrid")
fPl
sList = emuSX.queryTextGridCollection(fPl, query="Phonetic=l")
sList
fList$utts
sList$utts
strsplit(sList$utts,"/")
names(sList)
fPl
ptrofc = "~/data/BLOCK10"
library(devtools)
setwd("Developer/wrassp/")
document()
document()
document()
document()
document()
document()
document()
check()
document()
installed.packages()
